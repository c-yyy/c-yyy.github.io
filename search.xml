<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬旅游景点并导出Excel</title>
      <link href="/2019/08/23/python%E7%88%AC%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E5%B9%B6%E5%AF%BC%E5%87%BAExcel/"/>
      <url>/2019/08/23/python%E7%88%AC%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E5%B9%B6%E5%AF%BC%E5%87%BAExcel/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li>高中同学找帮忙，需要做一个丽江旅游景点的excel</li><li>有之前爬过初高中考题经历</li><li>把这个任务当作检验自己python爬虫的掌握情况</li><li>从零开始</li></ul><h2 id="要求及难点"><a href="#要求及难点" class="headerlink" title="要求及难点"></a>要求及难点</h2><ul><li>丽江全部旅游景点信息，包括景点名字、位置、特点、介绍、经纬度</li><li>经纬度在网站中没有体现，这里需要根据正则匹配到位置然后掉百度地图API查询</li><li>python中对json的解析</li><li>写入Excel</li></ul><h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><blockquote><p>用到哪些包<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="title">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>urllib读取链接，requests解析get请求，xlsxwriter写入Excel，re做正则，BeautifulSoup页面解析</li></ul><blockquote><p>写Excel函数<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 建表</span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">'丽江全部景区.xlsx'</span>)</span><br><span class="line">worksheet = workbook.add_worksheet(<span class="string">'丽江'</span>)</span><br><span class="line"># 将数据写入工作表中</span><br><span class="line">def writeExcel(row=<span class="number">0</span>, name=<span class="string">''</span>, <span class="keyword">tag</span>=<span class="string">''</span>, <span class="keyword">intro</span>=<span class="string">''</span>, position=<span class="string">''</span>):</span><br><span class="line">    <span class="keyword">print</span>(row)</span><br><span class="line">    <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">0</span>, <span class="string">'景区名'</span>)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">1</span>, <span class="string">'标签'</span>)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">2</span>, <span class="string">'介绍'</span>)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">3</span>, <span class="string">'经纬度'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">0</span>, name)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">1</span>, <span class="keyword">tag</span>)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">2</span>, <span class="keyword">intro</span>)</span><br><span class="line">        worksheet.<span class="keyword">write</span>(row, <span class="number">3</span>, position)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>记得递增row</li></ul><blockquote><p>请求百度地图API并解析json<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">if</span> place == <span class="string">'none'</span>:</span><br><span class="line"><span class="built_in">position</span> = <span class="string">'none'</span></span><br><span class="line"><span class="built_in">else</span>:</span><br><span class="line">#获取json格式的url</span><br><span class="line">positionUrl = <span class="string">'http://api.map.baidu.com/geocoder?address='</span> + place + <span class="string">'&amp;output=json&amp;key=f247cdb592eb43ebac6ccd27f796e2d2'</span></span><br><span class="line">r = requests.<span class="built_in">get</span>(positionUrl)</span><br><span class="line">        <span class="built_in">if</span> type(r.json()[<span class="string">'result'</span>]) == list:</span><br><span class="line">        <span class="built_in">position</span> = <span class="string">'none'</span></span><br><span class="line">        <span class="built_in">else</span>:</span><br><span class="line">                <span class="built_in">position</span> = str(r.json()[<span class="string">'result'</span>])</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>中间涉及python中dict(字典)转str，list(数组)转str，还有一些缺省值的判断，解析json的时候对r执行.json()方法即可拿到dict再转成str存入表中</li></ul><blockquote><p>一个shell脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm ./tmpcache -rf</span><br><span class="line">rm <span class="string">'丽江全部景区.xlsx'</span></span><br><span class="line"></span><br><span class="line">cachedir=<span class="string">'./tmpcache'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;cachedir&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;cachedir&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页码,进详情,抓内容</span></span><br><span class="line">python3 1_lijiang.py &gt; <span class="variable">$&#123;cachedir&#125;</span>/lj.txt | uniq &gt; <span class="variable">$&#123;cachedir&#125;</span>/lj.txt</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>这里每次做清空缓存的处理，然后再执行爬虫脚本</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对页面/接口编码规范有多认识</li><li>代码中因为有模拟点击下一页和进入详情的操作，套了3个for循环，这里应该再考虑下有没有其他办法</li><li>做的过程中遇到了很多语法报错的小问题，应及时加强python的语法学习</li><li>加深了对缺省值的判断，数据类型的转换理解</li><li>全程大概用时⌚️3小时，最终成功交付给同学完成任务✅</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go开发总结</title>
      <link href="/2019/07/29/go%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/29/go%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="题外话-ps-可以跳过"><a href="#题外话-ps-可以跳过" class="headerlink" title="题外话(ps:可以跳过)"></a>题外话(ps:<em>可以跳过</em>)</h2><p>单纯想学一门后端开发的语言，开始呢想用nodejs吧，也熟悉一点，不过放弃了<br>理由:干嘛不学点新东西</p><p>了解过后，看到Google弄了一个Go而且没出几年，果断入坑，贴一下go的宣传标语</p><blockquote><p>用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣<br>以下就是他们讨论得出的对编程语言的设计要求：</p><blockquote><ul><li>能够以更快的速度开发软件</li><li>开发出的软件能够很好地在现代的多核计算机上工作</li><li>开发出的软件能够很好地在网络环境下工作</li><li>使人们能够享受软件开发的过程</li></ul></blockquote></blockquote><p>这还有什么理由不选它呢</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>这里推荐3个学习基础的网站，要学习一门新的语言基础语法、安装这些都是逃不过的</p><ul><li><a href="https://go.wuhaolin.cn/the-way-to-go/" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="https://gobyexample.com/" target="_blank" rel="noopener">Go例子</a></li><li><a href="https://tour.golang.org/welcome/1" target="_blank" rel="noopener">在线写demo</a></li></ul><h3 id="Go的环境搭建也非常简单："><a href="#Go的环境搭建也非常简单：" class="headerlink" title="Go的环境搭建也非常简单："></a>Go的环境搭建也非常简单：</h3><ul><li>第一步: 打开浏览器，到这里<a href="https://golang.org/dl/" target="_blank" rel="noopener">Go下载页面</a></li><li>第二步: 选择符合你系统的source点击下载</li><li>第三步: 一直下一步知道完成安装</li><li>第四步: 查看本地go环境变量 <strong>$GOROOT</strong> <strong>$GOARCH</strong> <strong>$GOOS</strong> <strong>$GOBIN</strong> (默认都在$HOME/go)</li></ul><h3 id="为了测试你是否安装成功？"><a href="#为了测试你是否安装成功？" class="headerlink" title="为了测试你是否安装成功？"></a>为了测试你是否安装成功？</h3><p><code>cd ~</code><br><code>touch hello.go</code><br>粘贴以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>go run hello.go</code></p><p>输出<strong>“Hello, 世界”</strong>即表示安装成功</p><h3 id="这些看到什么时候开始搞项目代码呢？"><a href="#这些看到什么时候开始搞项目代码呢？" class="headerlink" title="这些看到什么时候开始搞项目代码呢？"></a>这些看到什么时候开始搞项目代码呢？</h3><p>我的想法是至少做到以下几点:<br>1.<strong>关键字</strong>、<strong>标识符</strong>、<strong>后缀名</strong>、<strong>变量基本数据类型</strong>、<strong>运算符</strong><br>2.基础语法 <strong>变量定义</strong>、<strong>if-else</strong>、<strong>for循环</strong>、<strong>函数声明</strong><br>3.会用<strong>package</strong> <a href="https://godoc.org/" target="_blank" rel="noopener">这里可以找你要的包</a></p><h2 id="实战项目分析"><a href="#实战项目分析" class="headerlink" title="实战项目分析"></a>实战项目分析</h2><p>先放代码目录结构，标准的MVC<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── api <span class="comment">// Controller层，处理逻辑的地方，等同于React中的Reducers</span></span><br><span class="line">│   ├── main.go</span><br><span class="line">│   ├── user.go</span><br><span class="line">│   └── <span class="selector-tag">video</span>.go</span><br><span class="line">├── auth</span><br><span class="line">├── cache</span><br><span class="line">│   └── main.go</span><br><span class="line">├── conf <span class="comment">// 配置信息，等同于React中config/constants</span></span><br><span class="line">│   ├── conf.go</span><br><span class="line">│   ├── i18n.go</span><br><span class="line">│   └── locales</span><br><span class="line">│       └── zh-cn.yaml</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main<span class="selector-class">.go</span> <span class="comment">//入口文件，等同于app.js</span></span><br><span class="line">├── middleware <span class="comment">// 中间键，顾名思义，等同于React中的也是middleware</span></span><br><span class="line">│   ├── auth.go</span><br><span class="line">│   ├── cors.go</span><br><span class="line">│   └── session.go</span><br><span class="line">├── model <span class="comment">//Model层，跟数据库打交道的地方，等同于React中的store</span></span><br><span class="line">│   ├── init.go</span><br><span class="line">│   ├── migration.go</span><br><span class="line">│   └── user.go</span><br><span class="line">├── serializer <span class="comment">// 序列化过的View层，丢一个json页面，等同于React中pages/component</span></span><br><span class="line">│   ├── common.go</span><br><span class="line">│   └── user.go</span><br><span class="line">├── server <span class="comment">// 路由层，分发路由的地方，等同于React中的router</span></span><br><span class="line">│   └── router.go</span><br><span class="line">├── service <span class="comment">// 接收参数，异常处理</span></span><br><span class="line">│   ├── user_login_service.go</span><br><span class="line">│   └── user_register_service.go</span><br><span class="line">└── util</span><br><span class="line">    └── common.go</span><br></pre></td></tr></table></figure></p><p>这样看来的话，react和go的目录结构真的好像呀，其实我感觉就是差不多的，我这里想用类比react的方法来翻译一下每个目录实际在做什么，无非当我们是前端的时候，我们是跟接口打交道，而当我们是后端的时候，我们是跟数据库打交道。</p><p>(未完待续。。。</p><h2 id="开发经验总结"><a href="#开发经验总结" class="headerlink" title="开发经验总结"></a>开发经验总结</h2><p>本项目呢，我还用到了redis，所以这里简单说一下</p><ul><li>对redis不了解的同学可以百度一下</li><li>做了redis其实就是实现了数据的持久化，将全部数据存储在内存中，支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制</li><li>性能好，拿数据库系统比较，数据库在执行一个事务时将每个变化都写入硬盘，而redis是放内存读取</li><li>可以简单理解为前端中的localstorage</li></ul><p>在install包的时候呢遇到总下载失败，原因是包被墙，下面介绍两个方案解决，更推荐第二种方式</p><ul><li>如果自己有梯子，开http代理，把代理全局设置一下，类似这样<br><code>export http_proxy=127.0.0.1:10181;export https_proxy=127.0.0.1:10181;</code></li><li>换个源，就像前端中的cnpm或者taobao源，<code>npm install</code>失败的时候，一般切个源就搞定了<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要依赖于 go module 功能，因此打开MODULE</span></span><br><span class="line"><span class="keyword">export</span> GO111MODULE=<span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 换个源，等同于用nrm use切源，亲测以下两个源都很快，任意挑选一个</span></span><br><span class="line"><span class="keyword">export</span> GOPROXY=https:<span class="comment">//goproxy.io</span></span><br><span class="line"><span class="keyword">export</span> GOPROXY=https:<span class="comment">//mirrors.aliyun.com/goproxy/</span></span><br></pre></td></tr></table></figure></li></ul><p>在开发过程中，对数据库的CRUD是难免的，所以这里我用<strong>Sequel Pro</strong>可以很方便的图形化管理数据库<br>在测试接口的时候，推荐<strong>Postman</strong>，高效且易操作</p><h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><ul><li>能做高并发的同时节约服务器资源，小服务的话用一个路由器都可以跑起来(ps:<strong>说人话！省钱！</strong>)</li><li>📦打包快、体积轻，部署简单<code>go build</code></li><li>取精华、剔糟粕，性能是真的好呀</li><li>这里省略一万个彩虹屁</li></ul><h2 id="其他一些东西"><a href="#其他一些东西" class="headerlink" title="其他一些东西"></a>其他一些东西</h2><ul><li>优雅而规范的写Go代码<a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">CodeReviewComments</a></li><li>通过配置，使得 vim 可以看起来像 ide 一样来开发 Go <a href="https://github.com/BroQiang/vim-go-ide" target="_blank" rel="noopener">Vim Go IDE</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React16复习总结</title>
      <link href="/2019/07/09/React16-reward/"/>
      <url>/2019/07/09/React16-reward/</url>
      
        <content type="html"><![CDATA[<h3 id="温故而知新，可以为师矣"><a href="#温故而知新，可以为师矣" class="headerlink" title="温故而知新，可以为师矣"></a>温故而知新，可以为师矣</h3><ul><li>最近在写taro发现对react有些用法不是很熟悉了，抓紧复习一波，顺便把知识点整理出来，供日后准备面试用</li><li>又加深了对React16的一些设计理解，废话不多说，直接进入主题</li></ul><h3 id="React的开发思想以及和其他框架的异同"><a href="#React的开发思想以及和其他框架的异同" class="headerlink" title="React的开发思想以及和其他框架的异同"></a>React的开发思想以及和其他框架的异同</h3><ul><li>之前写Vue会比较多，命令式模版语法，双向数据流，这里主要区分Vue和React *</li></ul><ul><li><p>JSX<br>就是createElement的语法糖</p></li><li><p>状态提升(lifting state up)<br>将共享的状态提升到就近的父组件上，由父组件来同意管理</p></li><li><p>自上而下的数据流(top-down data flow )<br>任何可变数据理应只有一个数据源，并保持自上而下的单向数据流，通常在拥有这个数据源的地方对数据做综合处理</p></li><li><p>受控组件与非受控组件<br>非受控组件的ref可以拿到dom使react容易结合其他JS库，扩展性更好，createRef</p></li><li><p>createContext<br>在组件中共享值的方法，等同于是全局的数据</p></li><li><p>纯函数的PureComponent<br>shouldComponentUpdate对React组件的性能优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的返回值为 true 时则更新组件，反之则不更新</span></span><br><span class="line"><span class="keyword">const</span> equalMethod = (prevProps, nextProps): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 定义你的比较逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> C = React.memo(<span class="function"><span class="params">props</span> =&gt;</span> &#123;&#125;,equalMethod)</span><br></pre></td></tr></table></figure><p>类似纯函数的PureComponent它内部是对对象进行浅比较</p></li><li><p>static getDerivedStateFromProps<br>应避免使用props给state赋值，那么更好的取代方法就是</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class C extends React.Component &#123;</span><br><span class="line">  <span class="keyword">state</span> = &#123;</span><br><span class="line">    y: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  static getDerivedStateFromProps(props, <span class="keyword">state</span>): State &#123;</span><br><span class="line">    if(props.y !== <span class="keyword">state</span>.y) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        y: props.y</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>getSnapshotBeforeUpdate<br>使用场景一般是获取组建更新之前的滚动条位置</p></li><li><p>新的React生命周期<br>1.static getDerivedStateFromProps<br>2.shouldComponentUpdate<br>3.render<br>4.getSnapshotBeforeUpdate<br>5.componentDidUpdate<br>6.componentWillUnmount</p></li><li><p>componentDidCatch<br>componentDidCatch 这个函数是 React16 新增的，用于捕获组件树的异常，如果render()函数抛出错误，<br>则会触发该函数。可以按照 try catch 来理解和使用，在可能出现错误的地方，<br>使用封装好的包含 componentDidCatch 生命周期的组建包裹可能出错的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PotentialError</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    error: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(info);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      error</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>出错了，请打卡控制台查看详细错误！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;   </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;PotentialError&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>PotentialError&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>看下React16下的完整例子</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import React <span class="keyword">from</span> 'react'</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 初始化<span class="keyword">state</span>方式（<span class="number">1</span>）</span><br><span class="line">    this.<span class="keyword">state</span> = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  static <span class="keyword">default</span>Props = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 初始化<span class="keyword">state</span>方式（<span class="number">2</span>）</span><br><span class="line">  <span class="keyword">state</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  static getDerivedStateFromProps(props, <span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于做项目的思考</title>
      <link href="/2019/05/31/about-project/"/>
      <url>/2019/05/31/about-project/</url>
      
        <content type="html"><![CDATA[<h2 id="最近跟进项目的一些总结"><a href="#最近跟进项目的一些总结" class="headerlink" title="最近跟进项目的一些总结"></a>最近跟进项目的一些总结</h2><ul><li><p>前期对需求思考可以很感性很发散，别被原有的框架、习惯给制约死，多从原始需求思考，回归本质。</p></li><li><p>写文档的时候，一方面注意还原用户完整使用路径，也确保项目成员易于理解；另一方面需要很细致严谨，确保细节描述、逻辑规则和状态说明都表述清晰，这是后期验收需求完成度的利器。</p></li><li><p>执行过程中，要紧跟需求的实现情况，与开发/设计沟通时要确保理解到位，做好需求管理，别把需求跟丢了，也别等到最后时刻才去关注实现效果和进度，这样做出来的功能百分比不符合你的要求，如图所示。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奶奶</title>
      <link href="/2019/05/14/nainai/"/>
      <url>/2019/05/14/nainai/</url>
      
        <content type="html"><![CDATA[<h1 id="奶奶👵"><a href="#奶奶👵" class="headerlink" title="奶奶👵"></a>奶奶👵</h1><ul><li>请了6天假，从5.1回到四川到5.11</li><li>5.2-9:52陪在奶奶身边守住了最后一口气</li><li>奶奶一路走好</li></ul>]]></content>
      
      
      <categories>
          
          <category> iwant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近</title>
      <link href="/2019/04/19/iwant/"/>
      <url>/2019/04/19/iwant/</url>
      
        <content type="html"><![CDATA[<h1 id="开心的事"><a href="#开心的事" class="headerlink" title="开心的事"></a>开心的事</h1><ul><li>这月转正</li><li>跟czx看了几场好电影</li><li>工作还算顺利，遇到的问题都解决了</li><li>在用linux了，nodejs基本也会了</li><li>口腔溃疡快好了</li><li>健身后精神状态感觉还可以</li></ul><h1 id="烦恼的事"><a href="#烦恼的事" class="headerlink" title="烦恼的事"></a>烦恼的事</h1><ul><li>前几天看到个不错的工作机会，纠结</li><li>家里装修好慢，发呆</li><li>czx最近生病了，担心</li><li>linux上golang的环境硬是装不上，气</li><li>最近想的有点多，哎</li></ul><h1 id="期待的事"><a href="#期待的事" class="headerlink" title="期待的事"></a>期待的事</h1><ul><li>下周三复联4的首映</li><li>转正涨工资</li><li>公司搬新</li></ul><h1 id="思"><a href="#思" class="headerlink" title="思"></a>思</h1><blockquote><p>996</p></blockquote><p>东哥，别写信了先把自己的事搞定吧<br>马云，修福报嘛，人设崩</p><p>  互联网公司，人是最大成本，不要为了省那所谓的剩余价值为难员工996，大部分都是外地来打工的，大家都不容易。先富带后富的话都不说了，你们挣到钱应该回馈的是员工，决策者和执行者缺一不可。现在大家都不笨，特别能在互联网大公司里，不要试图驯化年轻人的思维，做好你份内的事。</p><p>  不要说给钱007都干的话，他们可以给你加钱，也可以一脚把你踢开，他们是逐利的，他们不谈劳动法的时候不作为，以后他们就敢践踏劳动法，踢了你不给补偿，甚至肆意克扣工资，因为你们的忍让。如果996的风气现在不更正过来，以后你儿子女儿就可能要007，继续被压榨。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 《我没有说话》-马丁·尼莫拉</span></span><br><span class="line">他们迫害犹太人，我没有出声，</span><br><span class="line">  --因为我不是犹太人；</span><br><span class="line">然后他们杀工会成员，我没有出声，</span><br><span class="line">  --因为我不是工会成员；</span><br><span class="line">后来他们迫害天主教徒，我没有出声，</span><br><span class="line">  --因为我说新教徒；</span><br><span class="line">最后当他们开始对付我的时候，</span><br><span class="line">  --已经没有人能站出来为我发声了</span><br></pre></td></tr></table></figure><p>  希望大家一起抵制996，记住工作只是为了让生活更舒服，仅此而已。</p><blockquote><p>奔驰利之星</p></blockquote><p>中国人为什么要为难中国人呢，普通老百姓的钱都挣得不容易，奔驰的销售也好公关也好，你们只不过是他们的狗，为了多挣点钱能理解，但昧着自己的良心，坑害消费者，你们真的觉得这样好嘛？现在消费者也好，网友也好不是蠢，你们学历素质都没人家高，为什么一再搪塞，该退款退款，该换车换车，不会换位思考嘛。如果有个平台把做过缺德事的人都征信记录下来，以后你们走到哪，当你们自己成为消费者的时候，大家统一都以其人之道，你们会不会后悔今天吃下的人血馒头？</p><p>人在做天在看，公道自在人心</p>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年整理的知识图谱</title>
      <link href="/2019/04/11/fe-summary-png/"/>
      <url>/2019/04/11/fe-summary-png/</url>
      
        <content type="html"><![CDATA[<p><img src="http://pprzrrgk8.bkt.clouddn.com/ontend.png" alt="前端知识点整理图谱"></p>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独狼-献给那些独自行走的人们</title>
      <link href="/2019/04/10/Lonewolf/"/>
      <url>/2019/04/10/Lonewolf/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=46959835&cid=82249927&page=1" width="850" height="650" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给我还在大一的妹妹</title>
      <link href="/2019/04/10/to-mysister/"/>
      <url>/2019/04/10/to-mysister/</url>
      
        <content type="html"><![CDATA[<p>你今年19岁，哥哥23岁，关于成长，关于你还没经历的几年，我有一些话想对你说。      </p><p>我好羡慕你的年龄，羡慕你现在大把的机会，羡慕你的不知愁苦，也担心着这种不知愁苦会让你以后付出更多的愁苦。      </p><p>在我刚入大学的时候，我也像你一般的天真烂漫，享受着被隔壁班女生追求的幸福，享受着无尽的自由，我肆无忌惮的挥霍着我的大学时光，恋爱、上网、逃课、逛街、游山玩水…那种岁月静好，确实是我人生中幸福到难以忘记的时光。      </p><p>我是一个小小的本科生，在那个人人知道上进的岁月里，别人学英语，我在玩，别人复习期末考试，我在玩，别人学各种证书，我在玩，别人准备考研，我还在玩。换之而来的结果，我在大三下学期才把四级证书拿到。还有不要听“没有挂科的大学是不完整的”这类话。毕业时，别人捧着一堆证书回家，而我只带回了毕业证。在考研和就业的十字路口，因为自觉得对于考上理想学校差距甚远，并且英语是我的弱项，依然走上了就业的道路。   </p><p>是的，那时候年少轻狂，我并不感觉我会后悔，我告诉自己要享受当下，要去体验大学生活，可是谁也没有说大学的自由代表的是放肆的挥霍父母的血汗钱，谁也没有说大学的自由代表的是挥霍光阴不求上进，谁也没有说大学的自由代表的就是恋爱看夕阳而忘记家里父母期待的眼神…      </p><p>我说这些，并不是说你不准恋爱、不准休息、不准去享受大学的自由和美好，而是希望你恋爱的时候懂得担当、休息的原因是付出后的劳累、享受是因为你发现了大学的时光可以让你去实现自己心中的很多梦想，当你走出大学时，当若干年后你经历过世事沧桑再回过头去看时，有一个词能在你的脑子中出现，那就足够了，这个词叫“无悔”。      </p><p>对于大学的虚度，很快我便尝到了苦头。当我拿着简历发现毫无特长可写时，当我想考取更多的证书和机会却发现往往最低学历要求一本时，当我看着其他同学的学历心中暗暗自卑和羡慕时，我尝到了“后悔”两个字的真正滋味。是呀，读书不是唯一的机会，但是读书确实能给你更多的机会。毕业的这几年，我一边后悔着，一边又麻木的享受着不求上进，总感觉再去学习晚了，其实这是自己不求上进的借口而已，在这个全民学习、终身学习的社会，哪有什么早晚，无非是两种人，一种“活着”一种“死去”。我当了两三年的“死人”，终于在不断的反省中找到了一丝“气息”，我想靠着这一丝“气息”来跟你说说话，希望你永远“活着”。      </p><p>关于你玩手机这个话题，请允许我再唠叨几句。你在家的时候捧着手机，所以你不知道妈妈脸上又多了皱纹，不知道爸爸手上又多了茧子，你在学校的时候捧着手机，所以你不知道学校的夕阳是什么样子，不知道清晨的第一缕风吹在脸上的感觉。捧着手机，让你忘了父母忘了生活，由此，大学并不是你新的开始，只是换了个地方玩手机而已。那么玩手机让你得到了什么？得到了片刻的欢愉和对现实的逃避。失去了什么？失去了心中的亲情，失去了自我，失去了对生活的感悟，你的心将变得无比空洞，关于人生、亲情、生活，你将会感觉越来越遥远，而我不想让我妹妹变成那般的“行尸走肉”，所以，放下手机，去听一听自己的心跳，放下手机，去陪父母聊聊天，放下手机，去迎着朝阳跑一跑，享受那饱含着青春味道的汗水滴落。      </p><p>妹，我一直希望你能多看书，为的不是你的学历，而是你内心的丰富。我一直尽我所能的带你去旅行，不是为了让你换个地方呼吸，而是要增加你的见识。最后，哪怕你的学历不再提升，我也希望你能一直去思考、去充实自己，在我心里，你心灵的富足远比学历的高深要重要，希望你能在不断提升中成长，去体验生活和生命本身，希望你的大学生活能充实而有意义，更加的希望我的妹妹能永远幸福。</p><iframe src="//player.bilibili.com/player.html?aid=30259717&cid=52780585&page=1" scrolling="no" width="850" height="650" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid-layout</title>
      <link href="/2019/04/04/Grid-layout/"/>
      <url>/2019/04/04/Grid-layout/</url>
      
        <content type="html"><![CDATA[<h1 id="Grid-layout基础用法"><a href="#Grid-layout基础用法" class="headerlink" title="Grid-layout基础用法"></a>Grid-layout基础用法</h1><ul><li>grid就是二维的flex，能理解吧</li><li><p>如果设置了grid布局，容器内float、table-cell等将失效</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 九宫格布局</span><br><span class="line">display: grid/inline-grid;</span><br><span class="line">grid-template-columns/rows: repeat(3/autofill, 100px);</span><br></pre></td></tr></table></figure></li><li><p>均分用autofill自动填充</p></li><li>1fr、2fr代表是前面的一倍、两倍</li><li>取值范围minmax(100px, 1fr)</li><li>justify-items、align-items、place-items跟flex一样 或者 justify-self、align-self、place-self跟前面效果一样</li><li>justify-content、align-content、place-content跟flex一样- </li></ul><h1 id="Grid-layout高级用法"><a href="#Grid-layout高级用法" class="headerlink" title="Grid-layout高级用法"></a>Grid-layout高级用法</h1><ul><li><p>指定每跟网络线名字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-attr">[c1]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[c2]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[c3]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[c4]</span> <span class="selector-tag">auto</span></span><br><span class="line"><span class="selector-tag">grid-template-rows</span>: <span class="selector-attr">[r1]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[r2]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[r3]</span> 10<span class="selector-tag">px</span> <span class="selector-attr">[r4]</span> <span class="selector-tag">auto</span></span><br></pre></td></tr></table></figure></li><li><p>妈妈我要变成bootstrap可以嘛？当然可以</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(12, 1<span class="selector-tag">fr</span>)</span><br><span class="line">  <span class="selector-tag">or</span></span><br><span class="line"><span class="selector-tag">grid-template-rows</span>: <span class="selector-tag">repeat</span>(12, 1<span class="selector-tag">fr</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置行列间隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-row-gap</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">grid-columns-gap</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">or</span></span><br><span class="line"><span class="selector-tag">grid-gap</span>: 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li><li><p>指定一个区域由单元格组成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: 'a b c'</span><br><span class="line">                     'd e f'</span><br><span class="line">                     'g h i'</span><br></pre></td></tr></table></figure></li><li><p>先行后列？or 先列后行？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-auto-flow: rows dense; //dense 尽量填充满空格</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我看到的前端未来</title>
      <link href="/2019/04/04/FE-feture/"/>
      <url>/2019/04/04/FE-feture/</url>
      
        <content type="html"><![CDATA[<h1 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h1><ul><li>官网(现在生成一个的官网有很多建站网站已经做的相对比较完善了)</li><li>电商(非常成熟)</li><li>资讯新闻(还好吧)</li><li>直播、视频类(暂未接触过)</li><li>CMS(ant Design、vue-element-admin)</li><li>论坛(一套体系，包括注册登录、评论等已有成熟模版)</li><li>博客(hexo、Wordpress等)</li></ul><h1 id="移动端-h5"><a href="#移动端-h5" class="headerlink" title="移动端(h5)"></a>移动端(h5)</h1><ul><li>App类h5页面(功能体验尽可能贴近原生，易于访问)</li><li>活动分享页(动画、交互)</li><li>文章、图集(排版、布局)</li></ul><h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><ul><li>众所周知，微信小程序一家独大，其他个大厂相继推出</li><li>基本厂小程序内的api都基于或等于微信小程序，对于开发者来说是一个好事</li><li>为了磨平各小程序间差异一处编写多端打包(taro、uni-app、chameleon)</li><li>主流业务基本就是照搬原生app内的核心功能和一些生活小工具，易于访问，特别在微信更新后增加我的小程序入口</li><li>小游戏方面暂未接触，体验定不如原生，只是用来消遣零碎时间，开发成本小，但易出现抄袭换皮用户留存不高问题，微信也在监管这方面了</li><li>小程序生态体系我个人觉得有点类似apple体系里面的watch</li></ul><h1 id="原生App"><a href="#原生App" class="headerlink" title="原生App"></a>原生App</h1><ul><li>体验至上，ios/android不同端体验要同步，功能什么都是其次</li><li>RN、Weex、Qt、Flutter这类前端框架已经可以用来写原生App了，并且大部分支持多端编译，唯一不同Qt/Flutter性能上限高(底层、渲染引擎、中层的DSL)</li><li>这里提一个uni-app在开发工具极大降低开发、运维、迭代成本，但合不合适自己的业务需要掂量</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>未来前端不知道还会出什么新的框架，但是就目前趋势来说，支持多端、兼容性更好是主流</li><li>如果你现在也是一个前端，可以端关注一些大厂前端团队的主页，凹凸、FEX、FED、Deep Ocean、齐舞团</li><li>WebGL/WebGPU、3D动画、图形渲染、GCanvas这些可能会专门做成一个职业，不过都会出工具的，以后要实现一个什么效果，可以用工具拖出来</li><li>Nodejs可能对于你来说会成为必会项，其实对于会用来说一点不难</li><li>真怕人工智能以后能切图了，那么纯切图仔的日子要好好考虑下，不过我相信到现在没有纯切图仔了🐶</li><li>现在前端智能化，一些基于计算机视觉、深度学习等，从设计稿(Sketch、PSD、静态图片)一键只能生成高可以维护性代码已成事实</li><li>如果你现在是工作1-3年，希望关注下项目架构，底层渲染等的实现原理，总结一套自己的最佳实践</li><li>以后前端(ios、android、h5)会不会融合成一个职业呢，天下大势分久必合🐶</li><li>想做全栈的，建议考虑学下go、python</li><li>真想一直做程序员的话，数据结构、算法、原理、协议这些还是逃不过，早点弄弄，网上都有总结笔记，捡重点</li><li>如何对底层协议、结构渲染、编译原理感兴趣的，深入看看，不说其他，让你工资翻倍是可以的</li><li>别害怕来不及，从现在开始吧，好好倒腾几个github项目，也是加分项，有可能就是你咸鱼翻身的机会🐶</li><li>多涉猎未知，以前没尝试过的，平时多去玩玩，教程也有，别人踩坑经验也有，别怕</li><li>技术向前(钱)学，向后(厚)总结，能以高效率工作多挣钱，生活也能更加丰富</li><li>996.icu看个人，你现在的能力配得上有更好选择嘛(加班不变，薪资更高or薪资不变，加班少)</li><li>(做人做事)真🐂🍺领导不赏识？自己干呀、出国去呀，少抱怨</li></ul><h1 id="题外话-仅个人观点"><a href="#题外话-仅个人观点" class="headerlink" title="题外话(仅个人观点)"></a>题外话(仅个人观点)</h1><p>  我是2016年入的前端坑，看这两年的前端发展来说，Vue、React很成功，基本把国内前端市场吃住了，大家要么会Vue要么会React，再怎么都要会一个，才敢出来找前端相关工作，各种培训机构或者网课等，Vue/React实战开发，包你一个月快速掌握前端开发月薪过万这样子的课是最受欢迎的，但等现在浪潮退去，市场积累了很多前端从业者后，一些是自学的、一些是培训的大家技术可能差距不大，大家个凭本事进入不同公司，接触不同业务，不同同事，一年/两年后就会出现分层，甚至出现淘汰，就像2018年底、2019年初的裁员潮，我也不是专家我对市场懂的也不是很多，但是我相信一个道理，金子总会发光，为什么大家同时进入公司，分在同一个业务组，一年后有的被优化了，有的跳槽升职加薪，原因呢？难道他们更加聪明？对，就是，还是要承认有的人就是更加聪明更加有天赋更有资源。当然了，这些是老天爷赏饭吃，但笨鸟先飞也是真实存在的，机会总是留给有准备的人，可能你在做业务的时候纠结的是这个数组怎么没有渲染出来，间距怎么改不了啊，编译打包怎么在我电脑上就报错啊，其实这些问题都是具体化的，都一定有解决办法，如果我工作两年十年我积累的是如何解决这些问题的方案，我觉得路会越走越窄，你的方案只是临时解决了当时你遇到的，具有时效性(互联网技术本来就具有时效性)，就像几年前大家诟病的写ie-hock，各类奇怪的css、布局等问题，其实现在回过头来看看，比你成熟的解决方案、比你性能更棒的框架、语法层出不穷，你积累的解决方案放到今天可能自己都不愿意拿出来真正再ctrl+V到业务代码中吧，所以关键的不是你遇到这个问题解决的方案积累的有多少，而是透过你遇到的这些问题能不能透过现象看到本质以及为什么你百度到的方案要这样做。再说说数据结构和算法这个东西，如果你不去学，可能真的这辈子都用不到，也感受不到它的好。但是一旦掌握，你就会常常被它的强大威力所折服。之前你可能需要费很大劲儿来优化的代码，需要花很多心思来设计的架构，用了数据结构和算法之后，很容易就可以解决了。你一直用的Lodash很方便好用那他们是怎么写的，我自己去实现一个_.cloneDeep还不是可以，那么你会动手去实现一个lodash嘛，一到写CMS后台管理，就直接拉现成的admin模版，随便改改页面、调调参数加上你的业务就ok了，你真的愿意做一辈子 CRUD boy 吗？虽然有webpack配置打包工具，对前端自动化、工程化非常好用，但我有全面的了解过这其中的每一项配置和插件使用嘛，我自己可以开发一个插件嘛。这里别杠“我买冰箱来用难道我自己要会制冷？”这个问题，不跟你多bb，技术是服务于业务的，好的未必合适，知其然并知其所以然，这就是你拉开差距的地方！</p>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xd-cli</title>
      <link href="/2019/04/03/xd-cli/"/>
      <url>/2019/04/03/xd-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><ul><li>工作也差不多满一年了，对于基本的业务开发有了一些自己的想法</li><li>刚开始工作的前3个月，每天都可以接触到新东西，接触新业务</li><li>3个月之后业务开发熟悉了对于自己的技术成长就感觉受到了局限</li><li>如果一直没有作出改变，那么等于是3个月的经验要用一年</li><li>我的学习方式就是多对已经学过的做总结积累，然后探索没有接触过的新方法</li><li>所以这一篇是总结，对一年的收获做个总结</li><li>开始想以写下一篇博客的方式进行总结</li><li>后来觉得博客可能实用性不高，所以决定自己开发一个npm插件</li><li>好了接下来介绍下这个插件，也就知道我这一年所积累的东西</li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="预想实现功能"><a href="#预想实现功能" class="headerlink" title="预想实现功能"></a>预想实现功能</h2><ul><li>拿本地IPv4<code>ip</code></li><li>静态起服务<code>server</code>(支持自定义端口号server 1234，默认7777)<br><img src="http://pprzrrgk8.bkt.clouddn.com/WechatIMG11.png" alt=""></li><li>压缩图片资源<code>rar</code>(速度较快，压缩效果不及tinify，且暂时不能传参)<br><img src="http://pprzrrgk8.bkt.clouddn.com/WechatIMG16.png" alt=""></li><li>压缩图片资源<code>tinify</code>(速度较慢，压缩效果好，受tinify_api限制(每月500张，对于一般项目而言应该是够了)<br><img src="http://pprzrrgk8.bkt.clouddn.com/WechatIMG17.png" alt=""></li><li>支持网路图片压缩后存本地<code>tinify http://asdf.png</code><br><img src="http://pprzrrgk8.bkt.clouddn.com/WechatIMG9.png" alt=""></li><li>快速生成项目模版<code>xd ls</code><br><img src="http://pprzrrgk8.bkt.clouddn.com/WechatIMG12.png" alt=""></li><li>自动化爬虫</li><li>图片自动上传七牛云返回cdn链接</li></ul><h2 id="项目模版是主要功能点"><a href="#项目模版是主要功能点" class="headerlink" title="项目模版是主要功能点"></a>项目模版是主要功能点</h2><ul><li>移动端h5-vue</li><li>移动端h5-react</li><li>管理中后台admin-vue</li><li>管理中后台admin-angular6☑️</li><li>官网pc-vue</li><li>小程序-wepy️️☑️</li><li>小程序-taro</li><li>go后台模版</li><li>express后台模版</li></ul><h2 id="公用UI组件库"><a href="#公用UI组件库" class="headerlink" title="公用UI组件库"></a>公用UI组件库</h2><ul><li>针对移动端h5</li><li>针对管理中后台admin</li><li>针对小程序</li></ul><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><ul><li>关于xd-cli这个插件我最终想做成一个包含常用基础功能，然后再带一个生成项目模版的list</li><li>里面的功能实现都由原生js实现，后面会出一篇如何实现这个npm包的博客</li><li>此xd-cli包就是为工作的第一年画上句号</li><li>展望第二年准备学习一个后端语言go/nodejs、学习开发原生ios、熟悉用Linux、最后还是巩固基础（网络层/应用层）</li></ul><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><blockquote><p>开始之前我需要准备什么？</p><ul><li>mkdir 项目名称</li><li>npm init</li><li>remote至远程仓库</li><li>核心功能开发</li></ul></blockquote><blockquote><p>项目结构啥样的？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── LICENSE</span><br><span class="line">├── OTP.md <span class="comment">// 双因素身份验证</span></span><br><span class="line">├── README.md</span><br><span class="line">├── bin <span class="comment">// 命令式核心功能模块</span></span><br><span class="line">│   ├── ip.js</span><br><span class="line">│   ├── list.js</span><br><span class="line">│   ├── rar.js</span><br><span class="line">│   ├── server.js</span><br><span class="line">│   └── tinify.js</span><br><span class="line">├── index.js <span class="comment">// 文件主入口</span></span><br><span class="line">├── lib <span class="comment">// 存常量</span></span><br><span class="line">│   └── templates.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如何制作命令并调用相应功能模块代码，类似<code>ip</code>就调用/bin/ip.js?</p><ul><li>cd bin</li><li>touch ip.js</li><li>vi ip.js</li><li>第一行插入<code>#!/usr/bin/env node</code>，这是指定运行环境需在node下</li><li>导入需要模块后npm i xx –save，实现逻辑代码，具体代码就不贴了（已开源，末尾有github地址）</li><li>vi package.json，生成ip命令<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"ip"</span>: <span class="string">"./bin/ip.js"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"./bin/server.js"</span>,</span><br><span class="line">    <span class="string">"tinify"</span>: <span class="string">"./bin/tinify.js"</span>,</span><br><span class="line">    <span class="string">"rar"</span>: <span class="string">"./bin/rar.js"</span>,</span><br><span class="line">    <span class="string">"xd"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>Last but the least, 生成软连接<code>npm link</code></li></ul><blockquote><p>说明下几个关键模块是干嘛的？(自己去npm上搜)</p><ul><li>commander，总之就是制作命令的</li><li>chalk，让你的打印输出变成彩色</li><li>inquirer，用于跟用户交互的</li><li>download-git-repo，顾名思义</li><li>ora，loading模块，等待时间长有个转圈圈的，用户体验好</li><li>open，用你默认浏览器打开一个网址</li><li>tinify，🐼压缩用到里面的api</li></ul></blockquote><blockquote><p>功能做好了，我要发布出去给大家用，咋弄？(百度呗)</p><ul><li>逗你的啦</li><li><code>npm publish</code></li><li>注意一点，每次要发版本前记得改下version</li></ul></blockquote><blockquote><p>如何在实现过程中遇到除上面之外问题咋办?</p><ul><li>百度</li><li>给我留言(ps:提issue)</li></ul></blockquote><h1 id="附件📎"><a href="#附件📎" class="headerlink" title="附件📎"></a>附件📎</h1><ul><li><a href="https://www.npmjs.com/package/xd-cli" target="_blank" rel="noopener">npm地址</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作及规范化流程</title>
      <link href="/2019/03/28/git-quick-start/"/>
      <url>/2019/03/28/git-quick-start/</url>
      
        <content type="html"><![CDATA[<h1 id="日常git一个项目"><a href="#日常git一个项目" class="headerlink" title="日常git一个项目"></a>日常git一个项目</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> &lt;file_name&gt;</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">'msg'</span></span></span><br><span class="line"><span class="bash">git pull</span></span><br><span class="line"><span class="bash">git push</span></span><br></pre></td></tr></table></figure><h1 id="本地项目git到远程仓库"><a href="#本地项目git到远程仓库" class="headerlink" title="本地项目git到远程仓库"></a>本地项目git到远程仓库</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"# taro-quick"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git <span class="built_in">add</span> README.md</span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">"first commit"</span></span><br><span class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/<span class="symbol">&lt;name&gt;</span>/<span class="symbol">&lt;repo_name&gt;</span>.git</span><br><span class="line">git push -<span class="keyword">u</span> origin master</span><br></pre></td></tr></table></figure><h1 id="多人协作一个项目"><a href="#多人协作一个项目" class="headerlink" title="多人协作一个项目"></a>多人协作一个项目</h1><ul><li>不同分支（建议至少dev,master两个分支）</li><li>避免冲突</li><li>回滚尽量使用git revert</li></ul><h1 id="关于merge与rebase"><a href="#关于merge与rebase" class="headerlink" title="关于merge与rebase"></a>关于merge与rebase</h1><ul><li><a href="https://mp.weixin.qq.com/s/E4RuFnTztECRT-sKjQnTpg" target="_blank" rel="noopener">谈谈 Git Merge 和 Git Rebase 的应用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果安装</title>
      <link href="/2019/03/22/black-macOS/"/>
      <url>/2019/03/22/black-macOS/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>目前90%的笔记本、台式机都能支持，太老机型可能会不支持</li><li>安装成功和效果最佳是两码事</li><li>此教程能保证成功，优化需要去泡远景论坛，不同机型自己折腾</li><li>显卡优先适配A卡，N卡需要自己手动找驱动且目前仅支持10.14之前的MacOS系统</li></ul><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul><li><a href="https://blog.daliansky.net/categories/下载/镜像/" target="_blank" rel="noopener">MacOS镜像</a></li><li><a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">U盘制作工具</a></li><li><a href="https://www.macupdate.com/app/mac/61090/clover-configurator" target="_blank" rel="noopener">clover设置引导工具</a></li></ul><h1 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h1><ul><li>U盘容积不得低于8G</li><li>打开U盘制作工具，将下载的镜像导入</li></ul><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><ul><li>进入BIOS，选择从U盘启动</li><li>加载EFI，进入安装MacOS界面</li><li>抹掉 磁盘（注意：磁盘内数据无价，先备份）</li><li>将U盘内的EFI文件复制到磁盘的EFI</li><li>重启，选择从硬盘UEFI引导启动</li></ul><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><ul><li>各种clover.config的设置</li><li>驱动需要到论坛自己找，缺什么找什么</li><li>Happy Ending！</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2019/03/21/crawler/"/>
      <url>/2019/03/21/crawler/</url>
      
        <content type="html"><![CDATA[<h1 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h1><ul><li>目标网址</li><li>获取节点</li><li>模拟请求</li><li>解析内容</li><li>本地处理</li><li>过滤</li></ul><h1 id="获取当前页面并解析"><a href="#获取当前页面并解析" class="headerlink" title="获取当前页面并解析"></a>获取当前页面并解析</h1><ul><li>绝大部分网站目前都是<code>utf-8</code> 编码格式</li><li>解析页面库beautiSoup</li><li>针对节点进行分析</li><li>基本就是遍历目标节点</li></ul><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">'https://xxx.com'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">#获取当前页面</span></span><br><span class="line">    page = urllib.request.urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(page, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#分页</span></span><br><span class="line">    lists = soup.find_all('div', class='pg')</span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt; <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> listone <span class="keyword">in</span> lists:</span><br><span class="line">      <span class="comment"># 获取每页链接</span></span><br><span class="line">      aLists = listone.find_all(<span class="string">'a'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">''</span>&#125;)</span><br><span class="line">      <span class="keyword">for</span> a <span class="keyword">in</span> aLists:</span><br><span class="line">        url = BASE_URL + a[<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你永运不会准备好,so Just do it!</title>
      <link href="/2019/03/21/youAreNotReadyEver/"/>
      <url>/2019/03/21/youAreNotReadyEver/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=7859684&cid=12897928&page=1" width="850" height="650" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个符合Promise/A+规范</title>
      <link href="/2019/03/16/promise/"/>
      <url>/2019/03/16/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么promise出现"><a href="#为什么promise出现" class="headerlink" title="为什么promise出现"></a>为什么promise出现</h1><ul><li>解决异步回掉问题</li><li>以下情况是如果不要promise<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url, data, callback</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: data</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        ...</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="promise写法，-链式调用"><a href="#promise写法，-链式调用" class="headerlink" title="promise写法， 链式调用"></a>promise写法， 链式调用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type: <span class="string">'GET'</span>,</span><br><span class="line">      url: url,</span><br><span class="line">      data: data,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(url, data).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h1 id="promise三种状态"><a href="#promise三种状态" class="headerlink" title="promise三种状态"></a>promise三种状态</h1><ul><li>pending, 等待</li><li>fulfilled, 拿result, resolve()</li><li>rejected, 拿error, reject()</li></ul><h1 id="promise规范"><a href="#promise规范" class="headerlink" title="promise规范"></a>promise规范</h1><ul><li>promise内部一定又一个函数会在传入参数后立即执行</li><li>所以我们模拟这个过程，并将三种状态的变化带上<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  _this.status = <span class="string">'pending'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_this.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      _this.onResolved.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn()) <span class="comment">// 链式操作需要</span></span><br><span class="line">      _this.status = <span class="string">'fulfilled'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_this.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">      _this.onResolved.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn()) <span class="comment">// 链式操作需要</span></span><br><span class="line">      _this.status = <span class="string">'rejected'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异常处理</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Promise添加`.then`方法</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onfulfiled, onrejected</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 入餐处理</span></span><br><span class="line">  onfulfiled = <span class="keyword">typeof</span> onfulfiled === <span class="string">'function'</span> ? onfulfiled : <span class="function"><span class="params">res</span> =&gt;</span> res</span><br><span class="line">  onrejected = <span class="keyword">typeof</span> onrejected === <span class="string">'function'</span> ? onrejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="keyword">throw</span> err&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_this.status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'fulfiled'</span>:</span><br><span class="line">        onfulfiled(res)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'rejected'</span>:</span><br><span class="line">        onrejected(err)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        _this.Promise(promise)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="未完-待续"><a href="#未完-待续" class="headerlink" title="未完.(待续)"></a>未完.(待续)</h1>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归家</title>
      <link href="/2019/01/25/gohome/"/>
      <url>/2019/01/25/gohome/</url>
      
        <content type="html"><![CDATA[<h1 id="抢票"><a href="#抢票" class="headerlink" title="抢票"></a>抢票</h1><ul><li>在刚开始抢票时，各类分享加速的二维码轰炸了我的pyq</li><li>开始想，这个流量加速包真的有效果没</li><li>那么如果真的要加速，实现的原理是什么</li><li>大家都知道唯一出票机构就是12306</li><li>那么抢票软件是如何让12306能优先处理vip类抢票呢</li><li>那么12306会作出对于这类抢票软件的限制or屏蔽嘛</li><li>提高抢票成功率这明显就已经打破了规则</li><li>12306对于这样违反规则的行为会怎么处理呢</li><li>vip抢票就是高速多刷新，那么对于ip的速度和刷新率会做限制嘛</li><li>总之，我用了低速然后抢到了</li><li>加速包到底是不是交智商税各自判断</li></ul><h1 id="检票"><a href="#检票" class="headerlink" title="检票"></a>检票</h1><ul><li>偶然发现现在做高铁可以直接使用身份证（不用取票</li><li>检票流程还有人脸识别哈哈哈</li></ul><h1 id="假期"><a href="#假期" class="headerlink" title="假期"></a>假期</h1><ul><li>陪陪家人</li><li>和女朋友</li><li>巩固基础并学习一个新技术</li><li>为年后新工作做准备</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对app的理解</title>
      <link href="/2019/01/17/myApp/"/>
      <url>/2019/01/17/myApp/</url>
      
        <content type="html"><![CDATA[<h1 id="app意义"><a href="#app意义" class="headerlink" title="app意义"></a>app意义</h1><ul><li>带来方便</li><li>用户体验</li><li>联系世界</li></ul><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><ul><li>app带来的是方便，不是烦人的广告、弹窗、乱七八糟的推送</li><li>国内外几大app拿出来对比、不舔不黑，到底那家用户体验做得好</li><li>你真知道绝大多数用户为什么要用这个app嘛，多想想为什么用这个app而不用其他竞争对手的</li><li>排除巨烧钱的app，你是独树一帜的那个嘛</li><li>麻烦还是多注重下用户隐私吧，我不愿意用隐私来换“猜你喜欢”、“精准推荐”</li><li>维护好自己app的生态，要么提高注册成本，要么隔离做好，不要什么人都在一个圈子，物以类聚，人以群分</li><li>内容可以不多，要有条理、实用</li><li>埋彩蛋、送福利、回馈用户，开发者与用户大家形成一个feedback</li><li>可能这个app只能有1w的用户，但你们都是这个app的宝啊，用户不在于数量、质量高什么的最好了</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019微信公开课有感</title>
      <link href="/2019/01/17/2019weChat/"/>
      <url>/2019/01/17/2019weChat/</url>
      
        <content type="html"><![CDATA[<h1 id="2019微信公开课"><a href="#2019微信公开课" class="headerlink" title="2019微信公开课"></a>2019微信公开课</h1><ul><li>小龙哥作为乔布斯的使徒在国内可以说做的很好了</li><li>微信这个软件功能并不复杂但里面的人性化在国内体验很好</li><li>用户体验优先</li><li>更加注重微信生态</li><li>渗透到生活方方面面</li></ul><h1 id="三个新社交软件"><a href="#三个新社交软件" class="headerlink" title="三个新社交软件"></a>三个新社交软件</h1><ul><li>三个一起说吧，里面可能多闪会走的更远一些</li><li>毕竟有抖音这个”国民软件“流量支撑</li><li>但！国内很多自媒体公众号对于这次的三个新软件文案都垃圾</li><li>要么矛头直接指向三个新软件一直踩，要么舔微信，某《世道变坏从颠覆微信开始》真的舔</li><li>多找找方向吧，要么把用户体验做到极致、要么有创新点</li><li>哦还有一个办法，烧钱、使劲的烧钱</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【#2019面试准备】答案版</title>
      <link href="/2019/01/04/answer-forU/"/>
      <url>/2019/01/04/answer-forU/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML、CSS"><a href="#HTML、CSS" class="headerlink" title="HTML、CSS"></a>HTML、CSS</h1><blockquote><p>[1]说几个关于HTML5和CSS3的新特性<br>关于HTML5，语义化，离线更新ServiceWorker，PostMessages、WebSocket、WebRTC<br>关于CSS3，Flex弹性盒布局、媒体查询、动效（Transform、Transtion、Animation）、预编译</p></blockquote><blockquote><p>[2]水平/垂直居中、页面布局的几种解决方案及优缺点<br>水平/垂直居中<br>已知宽:margin:0 auto;(position:absolute;top:50%;left:50%;transform: translate(50%,50%))<br>未知宽(flexbox):justify-content: center;align-items: center;<br>页面布局<br>浮动，需要清除浮动<br>绝对定位，脱离文档流影响页面结构<br>flex，实用性强<br>表格，(display:table/table-cell)<br>网格，(display:grid;grid-template-rows:100px;grid-template-columns:auto)</p></blockquote><blockquote><p>[3]谈一谈CSS盒模型<br>box-sizing:content-box/border-box;<br>标准模型，content-box，content<br>IE模型，border-box，content+padding+border</p></blockquote><blockquote><p>[4]对创建块级格式化上下文的理解<br>BFC元素垂直方向边距重叠<br>BFC区域不与浮动元素重叠（可用作清除浮动）<br>独立容器，里外元素互不影响<br>浮动元素参与高度计算<br>创建BFC(有float;postion值非static||reletive;display:table;overflow非hidden)</p></blockquote><blockquote><p>[5]CSS选择器权重计算<br>内联—id—class/伪类/属性—元素/伪元素<br>1000—-100—-10—-1</p></blockquote><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><blockquote><p>[1]JS有哪些变量类型和内置对象<br>变量类型:String、Number、Boolean、null、undefined、Symbol<br>内置对象:Object、Array、Date、RegExp、Function、Boolean、Number、String<br>typeof可以用来判断变量的基本类型<br>instanceof可以用来判断实例的构造函数</p></blockquote><blockquote><p>[2]对作用域链的理解<br>执行上下文定义了变量、函数的运行环境隶属于那个对象，例如所有的全局变量、全局函数都是在window对象内<br>作用域链即是自由变量的向上查找，检查当前作用域是否存在这个自由变量，如果没有就向上查找</p></blockquote><blockquote><p>[3]谈一谈闭包、如何创建一个闭包<br>闭包就是指有权访问另一个函数作用域中的变量的函数<br>创建一个闭包可讲函数作为函数的返回值或参数传递<br>坏处就是会造成内存泄漏，不会被垃圾回收<br>（PS：这里看情况可以展开讲垃圾回收的机制）<br>分标记清除和引用计数，V8新增一个ScavengeGC算法，维护两个空间（一个闲置、一个使用，清理非存活，复制呼互换）</p></blockquote><blockquote><p>[4]对原型链的理解<br>实例对象属性的向上查找，检查当前对象是否有该属性，如果没有就向它的构造函数原型上找<br>可用instanceof判断其构造函数<br>最顶层应是null，这也解释了为什么typeof null为Object</p></blockquote><blockquote><p>[5]JS中如何实现继承<br>原型链可以作为链接对象之间的桥梁，那么做继承就是利用这个桥梁<br>为构造函数的原型上增加属性，那么其所有的实例都将拥有这个属性<br>那么说回es6中的extends本质上也应该是用原型链实现的</p></blockquote><blockquote><p>[6]new操作符具体做了什么<br>创建一个新对象<br>this指向这个对象<br>执行代码即对this赋值<br>返回this</p></blockquote><blockquote><p>[7]JS中this怎么用<br>指向最后调用的那个对象<br>在箭头函数中默认指向其第一个父级对象<br>可用call、apply、bind改变this指向<br>其中call可以接受一个参数列表、apply只接受一个参数数组、bind返回的是一个函数</p></blockquote><blockquote><p>[8]说一说ajax的过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xml = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xml.open(<span class="string">'GET'</span>,<span class="string">'xxx;'</span>,<span class="literal">true</span>)</span><br><span class="line">xml.send()</span><br><span class="line">xml.onreadystatechange()=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(xml.readyState===<span class="number">4</span>&amp;&amp;xml.status===<span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>Http状态码</p><blockquote><p>[9]什么是跨域如何解决及每个方案的优缺点<br>浏览器有同源策略限制，不允许ajax访问其他域接口<br>协议、域名、端口都要一致<br><a href="https://c-yyy.github.io/2018/12/29/cors/" target="_blank" rel="noopener">跨域</a></p></blockquote><blockquote><p>[10]谈谈你对ES6的理解<br>新增块级作用域，使变量更加可控<br>新增Object.assign()、拓展运算符，可用做浅拷贝<br>新增Promise对象，使用异步解决callhell<br>新增Set(可用作数组去重)、Map(只能用stinrg做key)数据结构<br>解构赋值、模版字符串使操作对象、字符串更加便利<br>Proxy、Reflect为对象架设一层‘拦截’、监听修改<br>Interator遍历器(调用指针next方法)<br>Generator异步(内部为一个指针对象即Interator遍历器)<br>async/await同步写法异步执行<br>模块化</p></blockquote><blockquote><p>[11]用过哪些设计模式<br>单例<br>工厂<br>代理<br>观察者<br>略，暂时不展开</p></blockquote><blockquote><p>[12]TS跟JS有什么区别<br>TS为JS超集、可以认为是JS未来发展的趋势、遵循的新一代ECMA规范<br>增加静态类型检查、更加严谨</p></blockquote><blockquote><p>[13]如何实现深浅拷贝<br>浅拷贝:Object.assign()、展开运算符<br>深拷贝:JSON.parse(JSON.stringify()),lodash(_.cloneDeep())</p></blockquote><blockquote><p>[14]谈谈对JS运行机制和eventLoop的理解<br>JS自始至终是一个单线程，同一时间只能做一件事<br>eventLoop即事件轮询、宏任务/微任务<br>执行栈中优先执行宏任务、在空闲时执行微任务(requestIdleCallback、react16中fiber架构也用的这个api)</p></blockquote><blockquote><p>[15]谈一谈对JS异步的理解<br>代码不易读、但避免了回调地狱<br>几种解决方案:<br>jQuery Deferred<br>Promise<br>async/await<br>Generator</p></blockquote><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><blockquote><p>[1]描述下从浏览器地址输入url到显示页面的整个过程<br>DNS解析，将域名转ip并向上查找服务器，中间可以做DNS多级缓存（负载均衡）<br>通过ip向服务器发起TCP连接，三次握手<br>发送HTTP请求，请求报文（请求行、请求头、空行、请求体）<br>服务器处理请求并返回HTTP报文，响应报文（响应行、响应头、空行、响应体）<br>（PS:http缓存，从响应头/请求头中可以得出last-Modify/if-Modify-since、ETag/if-None-Match、Cache-Control/Expires）<br>浏览器解析渲染页面，这里进行render树的构建，dom树-&gt;css树-&gt;layout/reflow(计算)-&gt;Painting<br>连接结束，四次挥手</p></blockquote><blockquote><p>[2]谈cookie、localStorage、sessionStorage区别<br>cookie会在http请求中携带，会在服务器和客户端间传递，所以cookie会有大小限制，不能超过4k，而且存在在设定的path下<br>sessionStorage和localStorage只会存在本地，大小要比cookie大，其中sessionStorage是仅在当前的会话窗口有效，不是所有窗口都可以共享数据的。其它两个是真个浏览器都可以数据共享</p></blockquote><blockquote><p>[3]对性能优化知道哪些<br>网络层，减少请求（合并js/css、雪碧图、base64图片）、压缩体积（js/css压缩、gzip）、做缓存（DNS缓存、CDN预解析、http缓存）<br>渲染层，结构尽量扁平化、DOM优化（事件代理）、避免重排重绘</p></blockquote><blockquote><p>[4]对安全性的理解<br>XSS防止脚本注入，加入一些转译<br>CSRF防止请求伪造，加入hash/token验证等<br>密码加盐</p></blockquote><blockquote><p>[5]关于HTTP协议类<br>状态码<br>http缓存<br>管线化<br>持久连接</p></blockquote><blockquote><p>[6]谈一谈对事件机制的理解<br>捕获冒泡，window<->document<->html<->body<->elem<br>event.preventDefault()阻止默认事件<br>event.stopPropagation()阻止冒泡（防止父级元素响应）<br>event.stopImmediatePropagation()注册两个事件，a,b;在a中加该事件，可阻止b的注册事件触发<br>event.currentTarget事件委托，环形事件注册，将子元素代理到父元素的事件上，当触发时需要获取当前绑定的事件的对象（父级元素）<br>event.target//IE 中event.sourceElement<br>获取当前触发的目标对象(子级元素）<br>DOM0(onclick)、DOM2(addEventLisener(‘click’),true捕获/false冒泡)、DOM3(addEventLisener(‘keyup’))<br>自定义事件<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eve = <span class="keyword">new</span> Event(<span class="string">'custom'</span>)/CustomEvent(<span class="string">'custom'</span>,params)</span><br><span class="line">$(<span class="string">'div'</span>).addEventLisener(<span class="string">'custom'</span>,<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;)</span><br><span class="line">$(<span class="string">'div'</span>).dispatchEvent(eve)</span><br></pre></td></tr></table></figure></-></-></-></-></p></blockquote><blockquote><p>[7]如何管理路由<br>hash模式<br>history模式<br>略</p></blockquote><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><blockquote><p>[1]谈一谈对MVVM的理解<br>MVC与MVVM<br>设计模式为观察者模式<br>这里的ViewModle就是data-&gt;Observer、Dep、Watcher-&gt;view<br>（这里以Vue举例子）讲三要素<br>响应式原理，Object.defineProperty和Proxy/Reflect<br>模版引擎，就是将模版字符串转化为JS对象<br>render函数负责渲染差异（这里有一diff算法，比较前后帧的差异）</p></blockquote><blockquote><p>[2]如何进行服务端渲染SSR（对SEO的理解）<br>与SPA单页应用对比，更友好的SEO、内容更快到达<br>部署的服务器需要处于Node server环境下，会占用更多CPU资源<br>在nuxt内部的整个执行流程中，最先经过的是状态管理中actions中的nuxtServerInit函数<br>然后会经过middleware里的中间件函数，此时，还没有进行数据获取和页面渲染，所以我们可以在中间件函数中执行一些进入路由前的逻辑，比如用户权限判断<br>之后开始获取页面数据，asyncData和data的结果基本相同，我们可以直接调用server的接口，比如理由axios发送http请求获取页面所需的原始数据，然后以对象的形式return出去，此时，Vue对象还没有实例化，所以asyncData里无法调用到this<br>fetch里主要用作填充状态树（store）数据，nuxt中页面一旦跳转，整个vuex状态树就会被重置，这相当于不同页面下vuex独立，nuxt提供了一个api，nuxtServerInit，可以传入两个参数对象，commit、req，这样store中就有了用户鉴权的信息<br>这些全部做完以后，开始实例化Vue对象，这里的逻辑和单页应用是一样的，在组装好整个页面应用之后，nuxt.js会将这个应用返回至前端。注意，这里返回的不是单纯的页面，而是应用。此时的页面局部spa应用的一些性质，比如数据监听双向绑定<br>页面来到前端后，开始执行mount的相关逻辑</p></blockquote><blockquote><p>[3]对某框架源码有过了解没（问框架原理）<br><a href="https://c-yyy.github.io/2018/12/30/React-stack/" target="_blank" rel="noopener">200行实现一个简易的React</a></p></blockquote><blockquote><p>[4]说一说对组件化、模块化开发的理解<br>高内聚、低耦合<br>提高代码复用率、降低代码耦合性</p></blockquote><blockquote><p>[5]了解Vuex/Redux吗<br>Vuex，维护一个store</p></blockquote><blockquote><p>[6]参与过上线/回滚整套流程吗<br>4个环境，开发、测试、预发布、线上<br>2个分支，新需求开发分支、稳定版修复bug分支</p></blockquote><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><blockquote><p>[1]用过什么打包工具<br>rollup，JS模块打包工具<br>Webpack，项目打包构建工具</p></blockquote><blockquote><p>[2]如何管理项目<br>git</p></blockquote><blockquote><p>[3]对项目架构方面有什么看法<br>暂略</p></blockquote><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【#2019面试准备】问题版</title>
      <link href="/2019/01/04/question-forU/"/>
      <url>/2019/01/04/question-forU/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML、CSS"><a href="#HTML、CSS" class="headerlink" title="HTML、CSS"></a>HTML、CSS</h1><ul><li>[1]说几个关于HTML5和CSS3的新特性</li><li>[2]页面布局的几种解决方案及优缺点</li><li>[3]谈一谈CSS盒模型</li><li>[4]对创建块级格式化上下文的理解</li><li>[5]CSS选择器权重计算</li></ul><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><ul><li>[1]JS有哪些变量类型和内置对象</li><li>[2]对作用域链的理解</li><li>[3]谈一谈闭包、如何创建一个闭包</li><li>[4]对原型链的理解</li><li>[5]JS中如何实现继承</li><li>[6]new操作符具体做了什么</li><li>[7]JS中this怎么用</li><li>[8]说一说ajax的过程</li><li>[9]什么是跨域如何解决及每个方案的优缺点</li><li>[10]谈谈你对ES6的理解</li><li>[11]用过哪些设计模式</li><li>[12]TypeScript跟JS有什么区别</li><li>[13]如何实现深浅拷贝</li><li>[14]谈谈对JS运行机制和eventLoop的理解</li><li>[15]谈一谈对JS异步的理解</li></ul><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><ul><li>[1]描述下从浏览器地址输入url到显示页面的整个过程</li><li>[2]谈cookie、localStorage、sessionStorage区别</li><li>[3]对性能优化知道哪些</li><li>[4]对安全性的理解</li><li>[5]关于HTTP协议类</li><li>[6]谈一谈对事件机制的理解</li><li>[7]如何管理路由</li></ul><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ul><li>[1]谈一谈对MVVM的理解</li><li>[2]如何进行服务端渲染SSR（对SEO的理解）</li><li>[3]对某框架源码有过了解没（问框架原理）</li><li>[4]说一说对组件化、模块化开发的理解</li><li>[5]了解Vuex/Redux吗</li><li>[6]参与过上线/回滚整套流程吗</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>[1]用过什么打包工具</li><li>[2]如何管理项目</li><li>[3]对项目架构方面有什么看法</li></ul><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【#2019面试准备】知识点梳理</title>
      <link href="/2019/01/02/2019interview/"/>
      <url>/2019/01/02/2019interview/</url>
      
        <content type="html"><![CDATA[<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ul><li><p>JS基础</p><ul><li><p>变量类型<br>String、Number、Boolean、null、undefined、Symbol<br>typeof、instanceof<br>操作运算符</p></li><li><p>作用域<br>执行上下文、自由变量的向上查找</p></li><li><p>深浅拷贝<br>Object.assign()、展开运算符<br>JSON.parse(JSON.stringify()),lodash(_.cloneDeep())</p></li><li><p>this<br>new一个对象过程<br>指向最后调用的那个对象<br>箭头函数(默认指向其第一个父级对象)<br>call(可以接受一个参数列表)、apply(只接受一个参数数组)、bind(返回的是一个函数)</p></li><li><p>原型<br>实例对象的<strong>proto</strong>指向其构造函数的prototype<br>instanceof判断一个函数是否是一个变量的构造函数</p></li><li><p>闭包<br>函数父级作用域在定义时非执行时<br>封装变量收敛修改权限，变量始终保存在内存中可供其他函数访问<br>做函数返回值、做函数参数传递<br>垃圾回收GC（标记清除、引用计数、ScavengeGC(From-&gt;To)）</p></li><li><p>继承<br>原型链继承，类实例指向prototype<br>class类extends</p></li></ul></li></ul><hr><ul><li>异步<ul><li>单线程</li><li>eventLoop（宏任务、微任务、执行栈）</li><li>jq-deferred -&gt; Promise/Generator -&gt; async/await</li></ul></li></ul><hr><ul><li>浏览器<ul><li>事件机制</li><li>跨域</li><li>缓存</li><li>渲染（repaint/reflow）</li><li>路由原理hash模式、history模式</li><li>性能监控</li></ul></li></ul><hr><ul><li><p>框架</p><ul><li><p>三要素<br>响应式原理Object.defineProperty、Proxy<br>模版引擎（模版字符串-&gt;js对象）<br>渲染render函数（diff后渲染差异）</p></li><li><p>React<br>Redux<br>Nextjs</p></li><li><p>Vue<br>Vuex<br>Nuxtjs</p></li><li><p>Angluar<br>模版@Input()、@Output()<br>ViewChild、ElementRef<br>rxjs</p></li></ul></li></ul><hr><ul><li>小程序<ul><li>wepy</li><li>taro</li><li>小游戏引擎</li></ul></li></ul><hr><ul><li>工具自动化<ul><li>git</li><li>rollup、webpack</li></ul></li></ul><hr><ul><li>Nodejs</li></ul><hr><ul><li>通讯<ul><li>HTTP2</li><li>hybrid</li></ul></li></ul><hr><ul><li>安全<ul><li>XSS、CSRF</li><li>密码加盐</li></ul></li></ul><hr><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul><li>简历</li><li>话术</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React16-fiber</title>
      <link href="/2018/12/31/React16-fiber/"/>
      <url>/2018/12/31/React16-fiber/</url>
      
        <content type="html"><![CDATA[<h1 id="fiber是什么？"><a href="#fiber是什么？" class="headerlink" title="fiber是什么？"></a>fiber是什么？</h1><ul><li>React16中对diff算法的重构</li><li>由stack架构（递归调用阻塞线程）转为fiber架构</li></ul><h1 id="为什么fiber？"><a href="#为什么fiber？" class="headerlink" title="为什么fiber？"></a>为什么fiber？</h1><ul><li>横向对比stack架构</li><li>调度微任务，利用空闲期执行回调</li><li>使diff算法可控可追踪（达到非阻塞目的）</li></ul><h1 id="怎样实现fiber？"><a href="#怎样实现fiber？" class="headerlink" title="怎样实现fiber？"></a>怎样实现fiber？</h1><ul><li><p>纤维化（纤维队列）<br>我们需要将工作分成更小的部分，并使之能在短时间内运行，让主线程做更高优先级的事情<br>如果线程空闲，那么回到纤维队列</p></li><li><p>fiber对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fiber = &#123;</span><br><span class="line">  tag: HOST_ROOT||HOST_COMPONENT||CLASS_COMPONENT,</span><br><span class="line">  type: <span class="string">"div"</span>||Foo,</span><br><span class="line">  parent: parentFiber,</span><br><span class="line">  child: childFiber,</span><br><span class="line">  sibling: <span class="literal">null</span>,</span><br><span class="line">  alternate: currentFiber,</span><br><span class="line">  stateNode: <span class="built_in">document</span>.createElement(<span class="string">"div"</span>), <span class="comment">// instance</span></span><br><span class="line">  props: &#123; <span class="attr">children</span>: [], <span class="attr">className</span>: <span class="string">"foo"</span>&#125;,</span><br><span class="line">  partialState: <span class="literal">null</span>,</span><br><span class="line">  effectTag: PLACEMENT,</span><br><span class="line">  effects: []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>window.requestIdleCallback()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENOUGH_TIME = <span class="number">1</span> <span class="comment">//毫秒ms</span></span><br><span class="line"><span class="keyword">let</span> workQueue = [] <span class="comment">// 纤维队列</span></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  workQueue.push(task)</span><br><span class="line">  requestIdleCallback(performWork)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performWork</span>(<span class="params">deadline</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!nextUnitOfWork) &#123;</span><br><span class="line">    nextUnitOfWork = workQueue.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(nextUnitOfWork &amp;&amp; deadline.timeRemaining()&gt;ENOUGH_TIME) &#123;</span><br><span class="line">    nextUnitOfWork = performUnitOfWork(nextUnitOfWork) <span class="comment">// 执行当前work并返回下次work的所有信息</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(nextUnitOfWork || workQueue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    requestIdleCallback(performWork)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pendingCommit) &#123;</span><br><span class="line">    commitAllWork(pendingCommit);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>纤维队列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fiber tags</span></span><br><span class="line"><span class="keyword">const</span> HOST_COMPONENT = <span class="string">"host"</span></span><br><span class="line"><span class="keyword">const</span> CLASS_COMPONENT = <span class="string">"class"</span></span><br><span class="line"><span class="keyword">const</span> HOST_ROOT = <span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global state</span></span><br><span class="line"><span class="keyword">const</span> updateQueue = [] <span class="comment">// 存储等待更新</span></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> pendingCommit = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">elements, containerDom</span>) </span>&#123;</span><br><span class="line">  updateQueue.push(&#123;</span><br><span class="line">    <span class="keyword">from</span>: HOST_ROOT,</span><br><span class="line">    dom: containerDom,</span><br><span class="line">    newProps: &#123; <span class="attr">children</span>: elements &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  requestIdleCallback(performWork)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleUpdate</span>(<span class="params">instance, partialState</span>) </span>&#123;</span><br><span class="line">  updateQueue.push(&#123;</span><br><span class="line">    <span class="keyword">from</span>: CLASS_COMPONENT,</span><br><span class="line">    instance: instance,</span><br><span class="line">    partialState: partialState</span><br><span class="line">  &#125;)</span><br><span class="line">  requestIdleCallback(performWork)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提问root节点作为第一帧如何转换成nextUnitOfWork<br>答案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetNextUnitOfWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> update = updateQueue.shift();</span><br><span class="line">  <span class="keyword">if</span> (!update) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将setState参数从更新有效内容复制到相应的光纤</span></span><br><span class="line">  <span class="keyword">if</span> (update.partialState) &#123;</span><br><span class="line">    update.instance.__fiber.partialState = update.partialState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> root =</span><br><span class="line">    update.from == HOST_ROOT</span><br><span class="line">      ? update.dom._rootContainerFiber</span><br><span class="line">      : getRoot(update.instance.__fiber)</span><br><span class="line"></span><br><span class="line">  nextUnitOfWork = &#123;</span><br><span class="line">    tag: HOST_ROOT,</span><br><span class="line">    stateNode: update.dom || root.stateNode,</span><br><span class="line">    props: update.newProps || root.props,</span><br><span class="line">    alternate: root</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRoot</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node = fiber</span><br><span class="line">  <span class="keyword">while</span> (node.parent) &#123;</span><br><span class="line">    node = node.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>提问如何构造后续帧并生成fiberTree🌲？<br>答案：<br><code>先处理叶子节点，然后是其兄弟节点，然后是双亲节点，从下往上遍历</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performUnitOfWork</span>(<span class="params">wipFiber</span>) </span>&#123;</span><br><span class="line">  beginWork(wipFiber)</span><br><span class="line">  <span class="keyword">if</span> (wipFiber.child) &#123;</span><br><span class="line">    <span class="keyword">return</span> wipFiber.child</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历，直到没有child</span></span><br><span class="line">  <span class="keyword">let</span> uow = wipFiber</span><br><span class="line">  <span class="keyword">while</span> (uow) &#123;</span><br><span class="line">    completeWork(uow)</span><br><span class="line">    <span class="keyword">if</span> (uow.sibling) &#123;</span><br><span class="line">      <span class="comment">// Sibling needs to beginWork</span></span><br><span class="line">      <span class="keyword">return</span> uow.sibling</span><br><span class="line">    &#125;</span><br><span class="line">    uow = uow.parent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>fiber流程图<br><img src="../../public/img/fiber.png" alt="fiber流程图"></p></li><li><p>处理更新组件props和state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beginWork</span>(<span class="params">wipFiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (wipFiber.tag == CLASS_COMPONENT) &#123;</span><br><span class="line">    updateClassComponent(wipFiber);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateHostComponent(wipFiber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHostComponent</span>(<span class="params">wipFiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!wipFiber.stateNode) &#123;</span><br><span class="line">    wipFiber.stateNode = createDomElement(wipFiber);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newChildElements = wipFiber.props.children;</span><br><span class="line">  reconcileChildrenArray(wipFiber, newChildElements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateClassComponent</span>(<span class="params">wipFiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance = wipFiber.stateNode;</span><br><span class="line">  <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Call class constructor</span></span><br><span class="line">    instance = wipFiber.stateNode = createInstance(wipFiber);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wipFiber.props == instance.props &amp;&amp; !wipFiber.partialState) &#123;</span><br><span class="line">    <span class="comment">// No need to render, clone children from last time</span></span><br><span class="line">    cloneChildFibers(wipFiber);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  instance.props = wipFiber.props;</span><br><span class="line">  instance.state = <span class="built_in">Object</span>.assign(&#123;&#125;, instance.state, wipFiber.partialState);</span><br><span class="line">  wipFiber.partialState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newChildElements = wipFiber.stateNode.render();</span><br><span class="line">  reconcileChildrenArray(wipFiber, newChildElements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开始diff，将oldFiber与elements做对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Effect tags</span></span><br><span class="line"><span class="keyword">const</span> PLACEMENT = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> DELETION = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> UPDATE = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrify</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val == <span class="literal">null</span> ? [] : <span class="built_in">Array</span>.isArray(val) ? val : [val];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildrenArray</span>(<span class="params">wipFiber, newChildElements</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elements = arrify(newChildElements);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> oldFiber = wipFiber.alternate ? wipFiber.alternate.child : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> newFiber = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; elements.length || oldFiber != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevFiber = newFiber;</span><br><span class="line">    <span class="keyword">const</span> element = index &lt; elements.length &amp;&amp; elements[index];</span><br><span class="line">    <span class="keyword">const</span> sameType = oldFiber &amp;&amp; element &amp;&amp; element.type == oldFiber.type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sameType) &#123;</span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        type: oldFiber.type,</span><br><span class="line">        tag: oldFiber.tag,</span><br><span class="line">        stateNode: oldFiber.stateNode,</span><br><span class="line">        props: element.props,</span><br><span class="line">        parent: wipFiber,</span><br><span class="line">        alternate: oldFiber,</span><br><span class="line">        partialState: oldFiber.partialState,</span><br><span class="line">        effectTag: UPDATE</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (element &amp;&amp; !sameType) &#123;</span><br><span class="line">      newFiber = &#123;</span><br><span class="line">        type: element.type,</span><br><span class="line">        tag:</span><br><span class="line">          <span class="keyword">typeof</span> element.type === <span class="string">"string"</span> ? HOST_COMPONENT : CLASS_COMPONENT,</span><br><span class="line">        props: element.props,</span><br><span class="line">        parent: wipFiber,</span><br><span class="line">        effectTag: PLACEMENT</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldFiber &amp;&amp; !sameType) &#123;</span><br><span class="line">      oldFiber.effectTag = DELETION;</span><br><span class="line">      wipFiber.effects = wipFiber.effects || [];</span><br><span class="line">      wipFiber.effects.push(oldFiber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldFiber) &#123;</span><br><span class="line">      oldFiber = oldFiber.sibling;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">      wipFiber.child = newFiber;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevFiber &amp;&amp; element) &#123;</span><br><span class="line">      prevFiber.sibling = newFiber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后一步，更新到dom</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitAllWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  fiber.effects.forEach(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">    commitWork(f);</span><br><span class="line">  &#125;);</span><br><span class="line">  fiber.stateNode._rootContainerFiber = fiber;</span><br><span class="line">  nextUnitOfWork = <span class="literal">null</span>;</span><br><span class="line">  pendingCommit = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitWork</span>(<span class="params">fiber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fiber.tag == HOST_ROOT) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> domParentFiber = fiber.parent;</span><br><span class="line">  <span class="keyword">while</span> (domParentFiber.tag == CLASS_COMPONENT) &#123;</span><br><span class="line">    domParentFiber = domParentFiber.parent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> domParent = domParentFiber.stateNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fiber.effectTag == PLACEMENT &amp;&amp; fiber.tag == HOST_COMPONENT) &#123;</span><br><span class="line">    domParent.appendChild(fiber.stateNode);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.effectTag == UPDATE) &#123;</span><br><span class="line">    updateDomProperties(fiber.stateNode, fiber.alternate.props, fiber.props);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fiber.effectTag == DELETION) &#123;</span><br><span class="line">    commitDeletion(fiber, domParent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commitDeletion</span>(<span class="params">fiber, domParent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node = fiber;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.tag == CLASS_COMPONENT) &#123;</span><br><span class="line">      node = node.child;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    domParent.removeChild(node.stateNode);</span><br><span class="line">    <span class="keyword">while</span> (node != fiber &amp;&amp; !node.sibling) &#123;</span><br><span class="line">      node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node == fiber) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.sibling;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个精简版React</title>
      <link href="/2018/12/30/React-stack/"/>
      <url>/2018/12/30/React-stack/</url>
      
        <content type="html"><![CDATA[<h1 id="先贴原文，respect！以下是总结思考"><a href="#先贴原文，respect！以下是总结思考" class="headerlink" title="先贴原文，respect！以下是总结思考"></a>先贴原文，respect！以下是总结思考</h1><p><a href="https://juejin.im/post/5c0c7304f265da613e22106c?utm_source=gold_browser_extension" target="_blank" rel="noopener">200行代码实现简版react</a></p><hr><h1 id="React-Component-jsx-vdom"><a href="#React-Component-jsx-vdom" class="headerlink" title="React = Component + jsx + vdom"></a>React = Component + jsx + vdom</h1><ul><li><p>Component = (class component) + (functional component)</p><h2 id="element（typeof-type-’string’-’dom节点’-’组件实例’）"><a href="#element（typeof-type-’string’-’dom节点’-’组件实例’）" class="headerlink" title="element（typeof type=’string’?’dom节点’:’组件实例’）"></a>element<object>（typeof type=’string’?’dom节点’:’组件实例’）</object></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'button'</span>||Button</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">'button button-blue'</span>,</span><br><span class="line">    children: &#123;</span><br><span class="line">      type: <span class="string">'button-children'</span>,</span><br><span class="line">      props: &#123;</span><br><span class="line">        children: <span class="string">'nb!'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提问：React如何将jsx语法转换为纯对象？<br>答案：组件类返回值经过Babel（DiyReact.createElement）<br>输出<code>var foo = createElement(&#39;div&#39;,{id:&#39;foo&#39;},&#39;nb!&#39;);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换为element对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  props = <span class="built_in">Object</span>.assign(&#123;&#125;,props);</span><br><span class="line">  props.children = [].concat(...children)</span><br><span class="line">    .filter(<span class="function"><span class="params">child</span> =&gt;</span> child != <span class="literal">null</span> &amp;&amp; child !== <span class="literal">false</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">child</span> =&gt;</span> child <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? child : createTextElement(child))</span><br><span class="line">  <span class="keyword">return</span> &#123;type, props&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="element-amp-amp-dom"><a href="#element-amp-amp-dom" class="headerlink" title="element &amp;&amp; dom"></a>element &amp;&amp; dom</h2><p><img src="https://user-gold-cdn.xitu.io/2018/12/9/16790a131646f2ad?imageView2/0/w/1280/h/960/ignore-error/1" alt="dom"></p></li><li><p>ViewModel = vdomTree + diffAlgori</p><h2 id="vdomTree"><a href="#vdomTree" class="headerlink" title="vdomTree"></a>vdomTree</h2><p>creatElement()函数最终输出一个对象，那我们可以对其中的props或者state进行监听与更新（观察者模式）<br>整个页面对应一颗可以实时更新状态的虚拟dom节点树🌲</p><h2 id="diffAlgori（避免删除重建dom节点的开销）"><a href="#diffAlgori（避免删除重建dom节点的开销）" class="headerlink" title="diffAlgori（避免删除重建dom节点的开销）"></a>diffAlgori（避免删除重建dom节点的开销）</h2><p><img src="https://user-gold-cdn.xitu.io/2018/12/9/16790a13163a4fa7?imageView2/0/w/1280/h/960/ignore-error/1" alt="diff算法"></p></li><li><p>ReactDOM.render()<br>react入口即是第一帧，所以此后的帧只会在挂载期diff<br>如：compentDidMount、componentWillUnmount</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rootInstance用来缓存一帧vdom</span></span><br><span class="line"><span class="keyword">let</span> rootInstance = <span class="literal">null</span>，这里即是第一帧</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">element, parentDom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// prevInstance指向前一帧</span></span><br><span class="line">  <span class="keyword">const</span> prevInstance = rootInstance <span class="comment">// 这里实现的仅是ReactDOM.render,非组件render</span></span><br><span class="line">  <span class="comment">// element参数指向新生成的vdomTree</span></span><br><span class="line">  <span class="keyword">const</span> nextInstance = reconcile(parentDom, prevInstance, element) <span class="comment">// 对比前后帧</span></span><br><span class="line">  <span class="comment">// 调用完reconcile算法（即diff算法）后将rootInstance指向最新一帧</span></span><br><span class="line">  rootInstance = nextInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提问：你这里用instance表示帧，那跟前面的element有什么关系？<br>答案：instance = element + dom<br>在对比前后帧调用reconcile()进行diff比较时需要更新应用到真实dom<br>由此还需要实现一个instantiate函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instantiate</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;type, props=&#123;&#125;&#125; = element</span><br><span class="line">  <span class="keyword">const</span> isDomElement = <span class="keyword">typeof</span> type === <span class="string">'string'</span></span><br><span class="line">  <span class="comment">// 区分函数式组件与类组件</span></span><br><span class="line">  <span class="keyword">const</span> isClassElement = !!(type.prototype &amp;&amp; type.prototype.isReactComponent)</span><br><span class="line">  <span class="keyword">if</span>(isDomElement) &#123;</span><br><span class="line">    <span class="comment">// 创建dom</span></span><br><span class="line">    <span class="keyword">const</span> isTextElement = type === TEXT_ELEMENT</span><br><span class="line">    <span class="keyword">const</span> dom = isTextElement ?</span><br><span class="line">    <span class="built_in">document</span>.createTextNode(<span class="string">''</span>) :</span><br><span class="line">    <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    <span class="comment">// 设置dom属性，绑定dom事件</span></span><br><span class="line">    updateDomProperties(dom, [], element.props)</span><br><span class="line">    <span class="keyword">const</span> children = props.children || []</span><br><span class="line">    <span class="keyword">const</span> childInstances = children.map(instantiate) <span class="comment">// 子节点递归</span></span><br><span class="line">    <span class="keyword">const</span> childDoms = childInstances.map(<span class="function"><span class="params">childInstance</span> =&gt;</span> childInstance.dom)</span><br><span class="line">    childDoms.forEach(<span class="function"><span class="params">childDom</span> =&gt;</span> dom.appendChild(childDom))</span><br><span class="line">    <span class="keyword">const</span> instance = &#123;element, dom, childInstances&#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isClassElement) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> publicInstance = createPublicInstance(element, instance)</span><br><span class="line">    <span class="keyword">const</span> childElement = publicInstance.render()</span><br><span class="line">    <span class="keyword">const</span> childInstance = instantiate(childElement) <span class="comment">// 子节点递归</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(instance, &#123;<span class="attr">dom</span>: childInstance.dom, element, childInstance, publicInstance&#125;)</span><br><span class="line">    reuturn instance</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childElement = type(element.props)</span><br><span class="line">    <span class="keyword">const</span> childInstance = instantiate(childElement) <span class="comment">// 子节点递归</span></span><br><span class="line">    <span class="keyword">const</span> instance = &#123;</span><br><span class="line">      dom: childInstance.dom,</span><br><span class="line">      element,</span><br><span class="line">      childInstance</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>提问：你说这么多我也不想看啊，最核心的对比前后帧是怎么实现的呢？<br>答案：reconcile()<br><code>由stack算法（递归实现，阻塞线程）升级为React16中fiber架构（requestIdleCallback）</code><br><img src="https://user-gold-cdn.xitu.io/2018/12/9/16790a13163656b3?imageView2/0/w/1280/h/960/ignore-error/1" alt="reconcile"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reconcile</span>(<span class="params">parentDom, instance, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newInstance = instantiate(element);</span><br><span class="line">    <span class="comment">// componentWillMount</span></span><br><span class="line">    newInstance.publicInstance</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentWillMount</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentWillMount();</span><br><span class="line">    parentDom.appendChild(newInstance.dom);</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    newInstance.publicInstance</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentDidMount</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentDidMount();</span><br><span class="line">    <span class="keyword">return</span> newInstance;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// componentWillUnmount</span></span><br><span class="line">    instance.publicInstance</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentWillUnmount</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentWillUnmount();</span><br><span class="line">    parentDom.removeChild(instance.dom);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance.element.type !== element.type) &#123;</span><br><span class="line">    <span class="keyword">const</span> newInstance = instantiate(element);</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    newInstance.publicInstance</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentDidMount</span><br><span class="line">      &amp;&amp; newInstance.publicInstance.componentDidMount();</span><br><span class="line">    parentDom.replaceChild(newInstance.dom, instance.dom);</span><br><span class="line">    <span class="keyword">return</span> newInstance;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> element.type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    updateDomProperties(instance.dom, instance.element.props, element.props);</span><br><span class="line">    instance.childInstances = reconcileChildren(instance, element);</span><br><span class="line">    instance.element = element;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (instance.publicInstance</span><br><span class="line">      &amp;&amp; instance.publicInstance.shouldcomponentUpdate) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance.publicInstance.shouldcomponentUpdate()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// componentWillUpdate</span></span><br><span class="line">    instance.publicInstance</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentWillUpdate</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentWillUpdate();</span><br><span class="line">    instance.publicInstance.props = element.props;</span><br><span class="line">    <span class="keyword">const</span> newChildElement = instance.publicInstance.render();</span><br><span class="line">    <span class="keyword">const</span> oldChildInstance = instance.childInstance;</span><br><span class="line">    <span class="keyword">const</span> newChildInstance = reconcile(parentDom, oldChildInstance, newChildElement);</span><br><span class="line">    <span class="comment">// componentDidUpdate</span></span><br><span class="line">    instance.publicInstance</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentDidUpdate</span><br><span class="line">      &amp;&amp; instance.publicInstance.componentDidUpdate();</span><br><span class="line">    instance.dom = newChildInstance.dom;</span><br><span class="line">    instance.childInstance = newChildInstance;</span><br><span class="line">    instance.element = element;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildren</span>(<span class="params">instance, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dom, childInstances &#125; = instance;</span><br><span class="line">  <span class="keyword">const</span> newChildElements = element.props.children || [];</span><br><span class="line">  <span class="keyword">const</span> count = <span class="built_in">Math</span>.max(childInstances.length, newChildElements.length);</span><br><span class="line">  <span class="keyword">const</span> newChildInstances = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    newChildInstances[i] = reconcile(dom, childInstances[i], newChildElements[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newChildInstances.filter(<span class="function"><span class="params">instance</span> =&gt;</span> instance !== <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于团队</title>
      <link href="/2018/12/29/team/"/>
      <url>/2018/12/29/team/</url>
      
        <content type="html"><![CDATA[<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><ul><li><p>目标量化<br>对于新需求的把控，需要leader考虑、细化每一个重要的点，kpi是多少，合理分配到研发层，<br>具体实现交给研发，项目排期具问具分，对于前端团队来讲，可以从页面转换率入手，建立订单<br>漏斗模型，做性能分析优化，UI交互优化，每一个具体的层面都需要转化目标</p></li><li><p>解决问题<br>团队配合中，可能会出现kpi未完成，无休止加班，高压迭代，导致一次迭代战线拉长，出现疲惫，<br>效率降低，容易犯错，又如何帮助新人快速融入团队，上手项目。</p><p>思考团队制定的从产品-&gt;设计-&gt;开发-&gt;测试-&gt;上线这一套流程是否为当前最适合流程，及时做出<br>调整，对于公共服务与工具化、自动化服务等，有没有内部一套完整的解决方案。</p></li></ul><h1 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h1><ul><li><p>意识<br>做业务之前，是否对项目整体有全局意识，是否能分清主次，对于团队内的每一个流程是否有亲自参与，<br>沟通方面是否能表达到位，知道自己在团队中的担当位置，透过现象看本质，当有问题后有没有深入了解<br>过框架背后的原理，或者架构方面出了什么问题</p></li><li><p>技术<br>良莠不齐的同事如何相处与沟通，如何提升自己的开发效率，在面对某些问题有成熟的解决方案，并且能<br>有条理、清晰的阐述给同事，是否可以做一些工具类或者UI库等的东西来帮助团队改善重复劳动的状况，<br>如何组织内部分享，提升团队综合技术能力</p></li></ul><h1 id="公共管理"><a href="#公共管理" class="headerlink" title="公共管理"></a>公共管理</h1><ul><li>团队工具化程度与成熟度正相关</li><li>最优与最合适解决方案</li><li>协作成本与执行力</li><li>是否有feedback(反馈机制)</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2018/12/29/cors/"/>
      <url>/2018/12/29/cors/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>协议+域名+端口 相同</li><li>限制Cookie、localStorage、IndexDB、Ajax</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ul><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享（CORS）</li><li>nginx代理跨域</li><li>nodejs中间件代理跨域</li><li>WebSocket协议跨域</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CORS为主流解决方案</li><li>反向代理的配置与使用nodejs中间件原理类似</li><li>各方案优缺点</li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客说明</title>
      <link href="/2018/12/28/introduce/"/>
      <url>/2018/12/28/introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="关于我的博客"><a href="#关于我的博客" class="headerlink" title="关于我的博客"></a>关于我的博客</h1><ul><li>做了改版</li><li>技术和生活都会记录下来</li><li>输出干货</li></ul><h1 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h1><ul><li>非常喜欢！</li></ul><h1 id="纪念"><a href="#纪念" class="headerlink" title="纪念"></a>纪念</h1><ul><li>今天也是第一份工作离职</li></ul>]]></content>
      
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iwant </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
